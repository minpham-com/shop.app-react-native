name: Validate TS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  compile:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Compile TS (tsc)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install review dog
        uses: minpham-com/action-setup@v1

      - name: Get yarn cache directory path
        id: yarn-cache-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install node_modules
        run: yarn install --frozen-lockfile

      - name: Run TypeScript # Reviewdog tsc errorformat: %f:%l:%c - error TS%n: %m
        run: |
          yarn type-check | reviewdog -name="tsc" -efm="%f(%l,%c): error TS%n: %m" -reporter="github-pr-review" -filter-mode="nofilter" -fail-on-error -tee
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Lint TS (eslint, prettier)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Get yarn cache directory path
        id: yarn-cache-path-lint
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ ${{ steps.yarn-cache-path-lint.outputs.dir }} }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install node_modules
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint -f @jamesacarr/github-actions
